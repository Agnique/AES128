//
//  aes128.cpp
//  AES128
//
//  Created by 蔡佳仪 on 2019/5/31.
//  Copyright © 2019 CaiJY. All rights reserved.
//

#include "aes128.hpp"
#include <iostream>

const unsigned char sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};
const unsigned char sboxinv[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
    0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
    0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
    0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
    0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
    0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
    0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
    0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
    0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
    0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
    0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
    0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
    0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
    0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
    0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
    0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

const unsigned char RC[11] = {
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    0x80, 0x1b, 0x36
};

unsigned char mul(unsigned char x, unsigned char y=2)
{
    /* multiply x * y in GF(2^8)  */
    
    unsigned char r=0;
    
    if(y&0x01) r = x;
    while(y>>=1)
    {
        x = x&0x80?(x<<1)^0x1b:x<<1;
        if(y&0x01)
            r = r ^ x;
    }

    return r;
}


void SubWord(unsigned char (&tmp)[4])
{
    for(int i=0;i<4;i++)
    {
        tmp[i] = sbox[tmp[i]];
    }
}

void RotWord(unsigned char (&tmp)[4])
{
    unsigned char t;
    t = tmp[0];
    tmp[0] = tmp[1];
    tmp[1] = tmp[2];
    tmp[2] = tmp[3];
    tmp[3] = t;
}

aes128::aes128(const ByteArray& key)
{
    m_key.resize(key.size()==KEY_SIZE?KEY_SIZE:0);
    
    for(ByteArray::size_type i=0; i<m_key.size(); i++)
        m_key[i] = key[i];
    
    if(m_key.size()==KEY_SIZE)
    {
        // key expansion for cipher
        KeyExpansion();
        
    }

}


void aes128::encrypt(const ByteArray &pt
                                     , ByteArray &sm)
{
    int r, c;
    
    if(pt.size()==BLOCK_SIZE)
    {
        sm = ByteArray(BLOCK_SIZE);
        for(r=0; r<4; r++)
        {
            for(c=0; c<NB; c++)
            {
                m_state[r][c] = pt[r+4*c];
                
            }
        }
        AddRoundKey(0);
        
        for(int round=1; round<NR; round++)
        {
            SubBytes();
            Shiftrows();
            MixColumns();
            AddRoundKey(round);
  
        }
        SubBytes();
        Shiftrows();
        AddRoundKey(NR);
        
        for(r=0; r<4; r++)
        {
            for(c=0; c<NB; c++)
            {
                sm[r+4*c] = m_state[r][c];
            }
        }
    }

}

void aes128::decrypt(const ByteArray &sm, ByteArray &pt)
{
    int r,c;
    
    if(sm.size()==BLOCK_SIZE)
    {
        pt = ByteArray(BLOCK_SIZE);
        for(r=0; r<4; r++)
        {
            for(c=0; c<NB; c++)
            {
                m_state[r][c] = sm[r+4*c];
                
            }
        }
        AddRoundKey(NR);
        for(int round=NR-1; round>0; round--)
        {
            InvShiftRows();
            InvSubBytes();
            AddRoundKey(round);
            InvMixColumns();
        }
        InvShiftRows();
        InvSubBytes();
        AddRoundKey(0);
        
        for(r=0; r<4; r++)
        {
            for(c=0; c<NB; c++)
            {
                pt[r+4*c] = m_state[r][c];
            }
        }
    }
}

void aes128::KeyExpansion()
{
    unsigned char tmp[4];
    
    for(int i=0; i<4; i++)
    {
        m_rkey[i][0] = m_key[4*i];
        m_rkey[i][1] = m_key[4*i+1];
        m_rkey[i][2] = m_key[4*i+2];
        m_rkey[i][3] = m_key[4*i+3];
    }
    
    for(int i=4; i<44; i++)
    {
        for(int j=0; j<4; j++)
            tmp[j] = m_rkey[i-1][j];
        if(i % 4 == 0)
        {
            RotWord(tmp);
            SubWord(tmp);
            tmp[0] = tmp[0] ^ RC[i/4];
        }
        for(int j=0; j<4; j++)
            m_rkey[i][j] = m_rkey[i-4][j] ^ tmp[j];
    }

}

void aes128::AddRoundKey(const int round)
{
    for(int c=0; c<NB; c++)
    {
        for(int r=0; r<4; r++)
        {
            m_state[r][c] = m_state[r][c] ^ m_rkey[round*NB+c][r];
        }
    }
}

void aes128::MixColumns()
{
    unsigned char t_state[4][NB];
    for(int c=0; c<NB; c++)
    {
        t_state[0][c] = mul(m_state[0][c]) ^ mul(m_state[1][c],0x03) ^ m_state[2][c] ^ m_state[3][c];
        
        t_state[1][c] = m_state[0][c] ^ mul(m_state[1][c]) ^ mul(m_state[2][c],0x03) ^ m_state[3][c];
        
        t_state[2][c] = m_state[0][c] ^ m_state[1][c] ^ mul(m_state[2][c]) ^ mul(m_state[3][c],0x03);
        
        t_state[3][c] = mul(m_state[0][c],0x03) ^ m_state[1][c] ^ m_state[2][c] ^ mul(m_state[3][c]);
    }
    for(int r=0;r<4;r++)
        for(int c=0;c<4;c++)
            m_state[r][c] = t_state[r][c];
}

void aes128::InvMixColumns()
{
    unsigned char t_state[4][NB];
    for(int c=0; c<NB; c++)
    {
        t_state[0][c] = mul(m_state[0][c],0x0e) ^ mul(m_state[1][c],0x0b) ^ mul(m_state[2][c],0x0d) ^ mul(m_state[3][c],0x09);
        t_state[1][c] = mul(m_state[0][c],0x09) ^ mul(m_state[1][c],0x0e) ^ mul(m_state[2][c],0x0b) ^ mul(m_state[3][c],0x0d);
        t_state[2][c] = mul(m_state[0][c],0x0d) ^ mul(m_state[1][c],0x09) ^ mul(m_state[2][c],0x0e) ^ mul(m_state[3][c],0x0b);
        t_state[3][c] = mul(m_state[0][c],0x0b) ^ mul(m_state[1][c],0x0d) ^ mul(m_state[2][c],0x09) ^ mul(m_state[3][c],0x0e);
    }
    for(int r=0;r<4;r++)
        for(int c=0;c<4;c++)
            m_state[r][c] = t_state[r][c];
}

void aes128::Shiftrows()
{
    unsigned char tmp;
    
    tmp = m_state[1][0];
    m_state[1][0] = m_state[1][1];
    m_state[1][1] = m_state[1][2];
    m_state[1][2] = m_state[1][3];
    m_state[1][3] = tmp;
    
    tmp = m_state[2][0];
    m_state[2][0] = m_state[2][2];
    m_state[2][2] = tmp;
    tmp = m_state[2][1];
    m_state[2][1] = m_state[2][3];
    m_state[2][3] = tmp;
    
    tmp = m_state[3][0];
    m_state[3][0] = m_state[3][3];
    m_state[3][3] = m_state[3][2];
    m_state[3][2] = m_state[3][1];
    m_state[3][1] = tmp;
    
}

void aes128::InvShiftRows()
{
    unsigned char tmp;
    
    tmp = m_state[1][3];
    m_state[1][3] = m_state[1][2];
    m_state[1][2] = m_state[1][1];
    m_state[1][1] = m_state[1][0];
    m_state[1][0] = tmp;
    
    tmp = m_state[2][2];
    m_state[2][2] = m_state[2][0];
    m_state[2][0] = tmp;
    tmp = m_state[2][3];
    m_state[2][3] = m_state[2][1];
    m_state[2][1] = tmp;
    
    tmp = m_state[3][1];
    m_state[3][1] = m_state[3][2];
    m_state[3][2] = m_state[3][3];
    m_state[3][3] = m_state[3][0];
    m_state[3][0] = tmp;
}

void aes128::SubBytes()
{
    for(int r=0; r<4; r++)
    {
        for(int c=0; c<NB; c++)
        {
            m_state[r][c] = sbox[m_state[r][c]];
        }
    }
}

void aes128::InvSubBytes()
{
    for(int r=0; r<4; r++)
    {
        for(int c=0; c<NB; c++)
        {
            m_state[r][c] = sboxinv[m_state[r][c]];
        }
    }
}

void aes128::get_state()
{
    for(int c=0;c<4;c++)
    {
        for(int r=0;r<4;r++)
            std::cout<<std::hex<< std::setfill('0') << std::setw(2) << int(m_state[r][c]);
    }
    std::cout<<std::endl;
}
